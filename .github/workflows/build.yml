name: build

permissions:
  contents: write

on:
  push:
    branches:
      - "main"
    tags:
      - v*
  schedule:
    - cron: "0 0 * * *"
  pull_request:

jobs:
  build-x86_64-unknown-linux-gnu:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: install
        run: |
          gcc --version
          g++ --version
          clang --version
          sudo apt update
          sudo apt install gcc-14 g++-14 -y
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-14 14
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-14 14

      - name: build
        run: |
          gcc --version
          g++ --version
          clang --version
          sh ./v8-linux.sh

      - name: tar
        run: |
          rm -rf ~/v8/v8/out.gn/x64.release/obj
          rm -rf ~/v8/v8/out.gn/x64.release/gen
          cd ~/v8/v8/out.gn
          tar -cJf v8-x86_64-unknown-linux-gnu.tar.xz -C x64.release .

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: v8-x86_64-unknown-linux-gnu
          path: ~/v8/v8/out.gn/v8-x86_64-unknown-linux-gnu.tar.xz
      # - name: release
      #   if: startsWith(github.ref, 'refs/tags/')
      #   uses: ncipollo/release-action@v1
      #   with:
      #     artifacts: ~/v8/v8/out.gn/v8-x86_64-unknown-linux-gnu.tar.xz,dist-manifest.json

  build-x86_64-apple-darwin:
    if: false
    runs-on: macos-13
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: build
        run: |
          brew install gnu-tar
          sh ./v8-macos.sh
      - name: tar
        run: |
          rm -rf ~/v8/v8/out.gn/x64.release/obj
          rm -rf ~/v8/v8/out.gn/x64.release/gen
          cd ~/v8/v8/out.gn
          gtar -cJf v8-x86_64-apple-darwin.tar.xz -C x64.release .
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: v8-x86_64-apple-darwin
          path: ~/v8/v8/out.gn/v8-x86_64-apple-darwin.tar.xz
  build-aarch64-apple-darwin:
    if: false
    runs-on: macos-14
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: build
        run: |
          brew install gnu-tar
          sh ./v8-macos.sh
      - name: tar
        run: |
          rm -rf ~/v8/v8/out.gn/x64.release/obj
          rm -rf ~/v8/v8/out.gn/x64.release/gen
          rm -rf ~/v8/v8/out.gn/x64.release/clang_arm64_v8_x64
          cd ~/v8/v8/out.gn
          gtar -cJf v8-aarch64-apple-darwin.tar.xz -C x64.release .
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: v8-aarch64-apple-darwin
          path: ~/v8/v8/out.gn/v8-aarch64-apple-darwin.tar.xz

  build-x86_64-pc-windows-msvc:
    runs-on: windows-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      # - uses: actions/setup-python@v5
      #   with:
      #     python-version: "3.11"
      # - name: build
      #   shell: cmd
      #   run: |
      #     call .\v8-windows.cmd

      #     rmdir .\v8\v8\out.gn\x64.release\obj
      #     rmdir .\v8\v8\out.gn\x64.release\gen

      #     cd .\v8\v8\out.gn
      #     tar -cJf v8-x86_64-pc-windows-msvc.tar.xz -C x64.release .
      - name: download
        shell: powershell
        run: |
          $version = (Invoke-RestMethod "https://storage.googleapis.com/chromium-v8/official/canary/v8-win64-rel-latest.json").version
          Write-Output $version
          Invoke-WebRequest "https://storage.googleapis.com/chromium-v8/official/canary/v8-win64-rel-${version}.zip" -OutFile "v8-x86_64-pc-windows-msvc.zip"


          # Fetch the latest V8 Canary version from the Windows JSON endpoint
          $version = (Invoke-RestMethod "https://storage.googleapis.com/chromium-v8/official/canary/v8-win64-rel-latest.json").version

          Write-Output "V8 Canary version: $version"

          # Define download targets with platform-specific URLs and output filenames
          $targets = @(
              @{ name = "winx64"; url = "https://storage.googleapis.com/chromium-v8/official/canary/v8-win64-rel-$version.zip"; outfile = "v8-x86_64-pc-windows-msvc.zip" },
              @{ name = "macos-x64"; url = "https://storage.googleapis.com/chromium-v8/official/canary/v8-mac64-rel-$version.zip"; outfile = "v8-x86_64-apple-darwin.zip" },
              # @{ name = "linux64"; url = "https://storage.googleapis.com/chromium-v8/official/canary/v8-linux64-rel-$version.zip"; outfile = "v8-x86_64-pc-linux.zip" }.
              @{ name = "macos-arm64"; url = "https://storage.googleapis.com/chromium-v8/official/canary/v8-mac-arm64-rel-$version.zip"; outfile = "v8-aarch64-apple-darwin.zip" }
          )

          # Loop through each target and download the file
          foreach ($target in $targets) {
              Write-Output "Downloading $($target.name) ..."
              try {
                  Invoke-WebRequest -Uri $target.url -OutFile $target.outfile -ErrorAction Stop
                  Write-Output "Saved to $($target.outfile)"
              } catch {
                  Write-Output "Failed to download $($target.name): $_"
              }
          }
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: v8-x86_64-pc-windows-msvc
          # path: ~/v8/v8/out.gn/v8-x86_64-pc-windows-msvc.tar.xz
          path: v8-x86_64-pc-windows-msvc.zip

  build:
    needs: [
      "build-x86_64-unknown-linux-gnu",
      "build-x86_64-pc-windows-msvc",
      # "build-x86_64-apple-darwin",
      # "build-aarch64-apple-darwin",
    ]
    runs-on: ubuntu-24.04
    # if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: v8
          pattern: v8-*
          merge-multiple: true

      - name: release
        # if: startsWith(github.ref, 'refs/tags/')
        uses: ncipollo/release-action@v1
        with:
          artifacts: "v8/*"
          allowUpdates: true
          tag: "nightly"
          name: "nightly"
          token: ${{ secrets.GITHUB_TOKEN }}
          commit: main
          replacesArtifacts: true
  test-release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: ["build"]
    strategy:
      matrix:
        os: [
          ubuntu-24.04,
          windows-latest,
          macos-14,
          macos-13,
        ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: easy-install/easy-setup@v1
        with:
          url: https://github.com/ahaoboy/v8-build
      - name: test
        run: |
          which d8
          echo "console.log(1+1)" >> ./test.js
          d8 ./test.js
